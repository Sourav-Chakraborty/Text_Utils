{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","varible","onChange","toggleMode","style","display","color","placeholder","TextForm","useState","text","changeText","Len","changeLength","paddingBottom","paddingTop","padding","border","marginBottom","transform","width","htmlFor","value","e","preventDefault","text1","target","n","length","fontSize","background","margin","onClick","s","document","getElementById","Number","slice","showAlert","toUpperCase","toLowerCase","space","split","wordCnt","prototype","PropTypes","string","varible2","App","setMode","message","setAlert","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.152da3ad.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport \"./Navbar.css\"\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    \r\n    return (\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n        <div>\r\n                            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                   \r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.varible}</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" to=\"#\">{props.varible2}</a>\r\n                        </li> */}\r\n                        \r\n                       \r\n                    </ul>\r\n                    <div className=\"toggle-switch mx-2\">\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" onChange={props.toggleMode}/>\r\n                         <span className=\"slider round\" style={{display:\"inline\"}}></span>\r\n                    </label>\r\n                   { props.mode==='light'? (<span className=\"mx-3 my-1\">Enable dark mode</span>):(<span style={{color:\"white\"}} className=\"mx-3 my-1\">Disable dark mode</span>)}\r\n\r\n                    </div>\r\n                    <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form>\r\n                    \r\n                    </div>\r\n                </div>\r\n                </nav>\r\n\r\n        </div>\r\n    )\r\n}\r\nNavbar.prototype={\r\n    title:PropTypes.string,\r\n    varible:PropTypes.string,\r\n    varible2:PropTypes.string\r\n\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text,changeText]= useState(\"\")\r\n    const [Len,changeLength]=useState(0)\r\n    \r\n    function toUpper(e){\r\n        e.preventDefault()\r\n        const s=document.getElementById(\"inputAddress\").style.fontSize\r\n        const n=Number(s.slice(0,-2))\r\n        // console.log(n+2+\"px\")\r\n        document.getElementById(\"inputAddress\").style.fontSize=n-2+\"px\"\r\n      \r\n    }\r\n\r\n    function toLower(e){\r\n         e.preventDefault()\r\n        const s=document.getElementById(\"inputAddress\").style.fontSize\r\n        const n=Number(s.slice(0,-2))\r\n        // console.log(n+2+\"px\")\r\n        document.getElementById(\"inputAddress\").style.fontSize=n+2+\"px\"\r\n        props.showAlert(\"Converted to uppercase\",\"success\")\r\n    }\r\n\r\n\r\n    function changeTextarea(e){\r\n        e.preventDefault()\r\n        const text1=e.target.value\r\n        const n=text1.length\r\n       \r\n      \r\n        changeText(text1)\r\n        changeLength(n)\r\n       \r\n        \r\n    }\r\n\r\n    const wordCnt=()=>{\r\n        var space=text.split(' ').length;\r\n        if(text.length && text[text.length-1]===' ')\r\n            return (space-1)\r\n        else if(text.length)\r\n            return space\r\n        else\r\n            return 0\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div  style={{paddingBottom:\"250px\",paddingTop:\"30px\"}}>\r\n            \r\n            <form style={props.mode==='light'? {padding:\"20px 20px 20px 20px\",border:\"1px solid black\", marginBottom:\"20px\",transform: \"translate(80%, 3%)\",width:\"40%\"}:{padding:\"20px 20px 20px 20px\",marginBottom:\"20px\",border:\"1px solid white\",transform: \"translate(80%, 3%)\",width:\"40%\"}}>\r\n                    <h2 style={props.mode==='light'? {color:\"black\"}:{color:\"white\"}}>Please fill the form</h2>\r\n                    \r\n                    <div className=\"form-group\"  >\r\n                        <label htmlFor=\"inputAddress\" style={props.mode==='light'? {color:\"black\"}:{color:\"white\"}}>Address</label>\r\n                        <textarea type=\"text\" className=\"form-control\" id=\"inputAddress\" placeholder=\"type anything\" value={text} onChange={changeTextarea}  style={props.mode==='light'? {width:\"80%\",fontSize:\"20px\",color:\"black\",background:\"white\"}:{width:\"80%\",fontSize:\"20px\",color:\"white\",background:\"black\"}}/>\r\n                    </div>\r\n                    {\r\n                        Len===true && (<h4>Alert too long string</h4>)\r\n                    }\r\n                    <button   className=\"btn btn-primary\" style={{margin:\"10px\"}} onClick={toUpper}>-</button>\r\n                    <button   className=\"btn btn-primary\" style={{margin:\"10px\"}} onClick={toLower}>+</button>\r\n                    <button   className=\"btn btn-primary\" style={{margin:\"10px\"}} onClick={(e)=>{\r\n                        e.preventDefault()\r\n                        changeText(text.toUpperCase())\r\n                        props.showAlert(\"Converted to Uppercase\",\"success\")\r\n                    }}>Uppercase</button>\r\n                    <button   className=\"btn btn-primary\" style={{margin:\"10px\"}} onClick={(e)=>{\r\n                        e.preventDefault()\r\n                        changeText(text.toLowerCase())\r\n                        props.showAlert(\"Converted to Lowercase\",\"success\")\r\n                        }}>Lowercase</button>\r\n                    <button   className=\"btn btn-primary\" style={{margin:\"10px\"}} onClick={(e)=>{\r\n                        e.preventDefault()\r\n                        changeText('')}}>Clear</button>\r\n                    <div  style={props.mode==='light'? {color:\"black\"}:{color:\"white\"}}>\r\n                        <p>there are {text.length} letters & {wordCnt()} words</p>\r\n                     </div>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport React, { useState } from 'react'\n// import Alert from './components/Alert';\nimport Navbar from './components/Navbar';\n// import About  from './components/About';\n import TextForm from './components/TextForm';\n// import {BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert,setAlert]=useState({type:null,message:null})\n  const showAlert=(message,type)=>{\n      setAlert({\n        message:message,\n        type:type\n      })\n      setTimeout(()=>{\n        setAlert({type:null,message:null})\n      },2000)\n  }\n  const toggleMode=()=>{\n      if(mode==='light'){  \n        setMode('dark')\n        document.body.style.backgroundColor = \"black\"    \n        showAlert('Dark mode enabled','success')\n      }\n      else{  \n        setMode('light')\n        document.body.style.backgroundColor = \"white\"\n        showAlert('Light mode enabled','success')\n      }\n  }\n  return (\n   <>\n    {/* <Router> */}\n      \n      <Navbar title=\"my_blog\" varible=\"Home\" toggleMode={toggleMode} mode={mode} varible2=\"About\"/>\n      \n      {/* */}\n      {/* <Switch> */}\n         \n          {/* <Route path=\"/about\">\n            \n                <About mode={mode}/>\n            \n          </Route> */}\n          \n          {/* <Route path=\"/\"> */}\n           \n              <TextForm mode={mode} showAlert={showAlert}/>\n            \n          {/* </Route> */}\n        {/* </Switch> */}\n      {/* </Router> */}\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}